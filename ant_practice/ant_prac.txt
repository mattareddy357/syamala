build.xml
<!--
 1  clean existing directory structure
 2	create folder structure
 3	compile the source code - source is .java files and target .class files
 4	create a jar file - source is .class files and target is .jar file
 5) copy web content - source is .js files and put into target folder 
 6)	create a zip then delivery to client.  -->
 
 <project name="myproject" default="compile-tests">
 
	<target name="clean">
		<delete dir="build"/>
		<delete dir="dist"/>
	</target>
	
	<target name="init" depends="clean">
		<mkdir dir="build"/>
		<mkdir dir="build/classes"/>
		<mkdir dir="build/web"/>
		<mkdir dir="build/output"/>
		<mkdir dir="dist"/>		
		<mkdir dir="build/test/classes"/>
	</target>
	
	<target name="compile" depends="init">
		<javac srcdir="src/java"
         destdir="build/classes"
		/>
	</target>
	
	<target name="jar" depends="compile">
		<jar destfile="build/output/redbus_1.0.jar" basedir="build/classes"/>
	</target>
	
	<target name="copy" depends="jar">
		<copy todir="build/web">
		<fileset dir="src/web"/>
		</copy>
	</target>
	
	<target name="zip" depends="copy">
		<zip destfile="dist/redbus_1.0.zip">
			<fileset dir="build/output"/>
			<fileset dir="build/web"/>
		</zip>
	</target>
	
	
	<target name="compile-tests" depends="zip">
		<javac srcdir="test"
         destdir="build/test/classes"
        />
	
	</target>
<!--	<target name="runtests" depends="package,compile-tests">
	
		<junit dir="build/test/classes" fork="yes">
	
	
						<classpath>
							<pathelement path="build/jar/app-${appversion}.jar"/>
							<pathelement path="build/test/classes"/>
							<pathelement path="lib/junit.jar"/>
						</classpath>
						<formatter type="xml"/>
						<batchtest todir="build/junit">
							<fileset dir="build/test/classes" >
							</fileset>
						</batchtest>
		</junit>
		
	
	</target>   -->
 </project>